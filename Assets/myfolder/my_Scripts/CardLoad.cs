
// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class CardLoad:MonoBehaviour {
	public TextAsset file;
	public List<baseCard> cardDeck;
	
	void Awake(){
		Load (file);
		cardDeck = new List<baseCard>();
		DeckSetting ();
		Debug.Log (System.Convert.ToInt32(rowList[0].attack));
		
	}

	//여기서부터 덱만들기

	void DeckSetting(){
		Debug.Log ("DeckSetting");
		for(int i=0;i<=4;i++){
			baseCard card = new baseCard();
			card.CardName=rowList[i].Name;
			card.CardStatement=rowList[i].Statement;
			card.Attack=System.Convert.ToInt32(rowList[i].attack);
			card.Type=rowList[i].type;
			card.Effect=rowList[i].effect;
			cardDeck.Add(card);
		}

	}

	//여기까지 덱만들기
		public class Row
		{
			public string Num;
			public string Name;
			public string Statement;
			public string attack;
			public string type;
			public string effect;
			
		}
		
		List<Row> rowList = new List<Row>();
		bool isLoaded = false;
		
		public bool IsLoaded()
		{
			return isLoaded;
		}
		
		public List<Row> GetRowList()
		{
			return rowList;
		}
		
		public void Load(TextAsset csv)
		{
			rowList.Clear();
			string[][] grid = CsvParser2.Parse(csv.text);
			for(int i = 1 ; i <grid.Length ; i++)
			{
				Row row = new Row();
				row.Num = grid[i][0];
				row.Name = grid[i][1];
				row.Statement = grid[i][2];
				row.attack = grid[i][3];
				row.type = grid[i][4];
				row.effect = grid[i][5];
				
				rowList.Add(row);
			}
			isLoaded = true;
		}
		
		public int NumRows()
		{
			return rowList.Count;
		}
		
		public Row GetAt(int i)
		{
			if(rowList.Count <= i)
				return null;
			return rowList[i];
		}
		
		public Row Find_Num(string find)
		{
			return rowList.Find(x => x.Num == find);
		}
		public List<Row> FindAll_Num(string find)
		{
			return rowList.FindAll(x => x.Num == find);
		}
		public Row Find_Name(string find)
		{
			return rowList.Find(x => x.Name == find);
		}
		public List<Row> FindAll_Name(string find)
		{
			return rowList.FindAll(x => x.Name == find);
		}
		public Row Find_Statement(string find)
		{
			return rowList.Find(x => x.Statement == find);
		}
		public List<Row> FindAll_Statement(string find)
		{
			return rowList.FindAll(x => x.Statement == find);
		}
		public Row Find_attack(string find)
		{
			return rowList.Find(x => x.attack == find);
		}
		public List<Row> FindAll_attack(string find)
		{
			return rowList.FindAll(x => x.attack == find);
		}
		public Row Find_type(string find)
		{
			return rowList.Find(x => x.type == find);
		}
		public List<Row> FindAll_type(string find)
		{
			return rowList.FindAll(x => x.type == find);
		}
		public Row Find_effect(string find)
		{
			return rowList.Find(x => x.effect == find);
		}
		public List<Row> FindAll_effect(string find)
		{
			return rowList.FindAll(x => x.effect == find);
		}
		
	}